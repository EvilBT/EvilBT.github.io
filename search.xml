<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[基于Agera的EventBus实现库]]></title>
      <url>/2016/11/08/%E5%9F%BA%E4%BA%8EAgera%E7%9A%84EventBus%E5%AE%9E%E7%8E%B0%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="基于Agera的EventBus实现库"><a href="#基于Agera的EventBus实现库" class="headerlink" title="基于Agera的EventBus实现库"></a>基于Agera的EventBus实现库</h1><h2 id="AgeraBus简介"><a href="#AgeraBus简介" class="headerlink" title="AgeraBus简介"></a>AgeraBus简介</h2><p><a href="https://github.com/EvilBT/AgeraBus" target="_blank" rel="external">AgeraBus</a> 是基于谷歌开源的<a href="https://github.com/google/agera" target="_blank" rel="external">Agera</a>实现的Android事件总线，实现了EventBus基本常用的功能，下面将为你一一介绍，如果要了解Agera，可以去看我文章后面推荐的两个地址。<br><a id="more"></a></p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在项目根目录的build.gradle中添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">	repositories &#123;</div><div class="line">		...</div><div class="line">		maven &#123; url &quot;https://jitpack.io&quot; &#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在app的build.gradle中添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.github.EvilBT:AgeraBus:v1.0.1&apos;</div><div class="line">    compile &apos;com.google.android.agera:agera:1.2.0-beta3&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>一个事件总线的使用总是少不了订阅、取消、发送事件，还有获取数据，下面我们来看下AgeraBus的基本用法，首先我们定义一个普通的类充当一个事件类型:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String mName;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.mName = name;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.mName = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.mName;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单的订阅，注销事件以及获取最新数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Updatable</span></span>&#123;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">        <span class="comment">//register 同一个Updatable实例只能订阅同一种事件类型一次，如需重新</span></div><div class="line">		<span class="comment">//订阅，要先取消订阅，如果多次订阅会抛出异常，这里Activity实现了Updatable接口</span></div><div class="line">        AgeraBus.getDefault()</div><div class="line">                .addUpdatable(<span class="keyword">this</span>,User.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        <span class="comment">// unregister 取消订阅时，这个Updatable实例必须已经订阅了此事件，</span></div><div class="line">		<span class="comment">// 如果取消没有订阅的Updatable，会抛出异常</span></div><div class="line">        AgeraBus.getDefault()</div><div class="line">                .removeUpdatable(<span class="keyword">this</span>,User.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 接收到事件时调用的接口</div><div class="line">     * </div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// accept</span></div><div class="line">          AgeraBus.getDefault()<span class="comment">//获取默认总线</span></div><div class="line">                .getSupplier(User.class)<span class="comment">//拿到数据提供者</span></div><div class="line">                .get()<span class="comment">//获取封装好的数据Result&lt;User&gt;</span></div><div class="line">                .ifSucceededSendTo(<span class="keyword">new</span> Receiver&lt;User&gt;() &#123;<span class="comment">//数据成功接收到就发送给接收者</span></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(@NonNull User value)</span> </span>&#123;</div><div class="line">                        <span class="comment">//打印吐司</span></div><div class="line">                        Toast.makeText(BaseActivity.<span class="keyword">this</span>, value.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面就是最基本的订阅、取消事件以及接收数据。至于发送事件的话，只有一个入口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AgeraBus.getDefault().post(<span class="keyword">new</span> User(<span class="string">"Sherlock"</span>));</div></pre></td></tr></table></figure></p>
<p>上面就是AgeraBus最基本的用法，下面简单讲解一下，</p>
<blockquote>
<p>Agera 使用 <em>push event, pull data</em> 模型(推送事件,拉取数据)。 push event：被观察者只做事件通知，不携带任何数据; pull data：观察者根据自己需要从数据仓库(Repository.get())拉取数据。</p>
</blockquote>
<p>由于<em>push event, pull data</em>模型是数据和事件通知分离的，所以上面看到的Updatable接口设计上并没有携带数据过来的，我们在update方法里，如果要拉取数据，可以从AgeraBus拿到订阅事件的数据提供者:<br><em>Supplier</em>,再从Supplier中获取数据。</p>
<h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><p>EventBus 提供了线程分发，订阅优先级，取消事件分发，粘性事件，而这些在AgeraBus也都一一实现了。<br>使用这些高级功能时，我们的订阅方法是使用另外一个接口。下面会介绍到。</p>
<h3 id="线程分发与线程模型"><a href="#线程分发与线程模型" class="headerlink" title="线程分发与线程模型"></a><strong>线程分发与线程模型</strong></h3><p>ThreadMode有四种：<br>PostThread，MainThread，BackgroundThread，Async.</p>
<ul>
<li><strong>PostThread</strong> 订阅者将会被调用在与发布线程同样的线程中。上面基本用法就是采取这样的线程分发的，不涉及线程切换，通常是四种模式开销最小的一个。对于简单任务来说这是推荐用法，但使用这个分发模型要小心不要在主线程执行耗时长的任务，避免阻塞主线程。</li>
<li><strong>MainThread</strong> 订阅者将会被回调在Android的Main线程中，适用于更新UI而又不无法确定事件来源于哪个线程的情况。</li>
<li><strong>BackgroundThread</strong> 订阅者将在后台线程被回调，如果发布线程本身不是主线程，那么行为就跟<strong>PostThread</strong>一致，如果是在主线程发布事件，会切换到后台线程执行。</li>
<li><strong>Async</strong> 订阅者总是在一个单独的线程被回调。<h3 id="订阅优先级"><a href="#订阅优先级" class="headerlink" title="订阅优先级"></a><strong>订阅优先级</strong></h3>你可以在注册订阅者的时候设置优先级改变事件分发的顺序，按优先级从高到低分发事件回调。<h3 id="取消事件分发"><a href="#取消事件分发" class="headerlink" title="取消事件分发"></a><strong>取消事件分发</strong></h3>你可以在接收事件，拿到数据value之后中断之后的事件分发:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AgeraBus.getDefault().cancel(value);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>value</code> 是从<em>Supplier</em>拿到的事件的数据，在update中调用上面的取消分发，后续的订阅者将不会接收到此次事件。</p>
<h3 id="粘性事件"><a href="#粘性事件" class="headerlink" title="粘性事件"></a><strong>粘性事件</strong></h3><p>Agera 的 <em>push event, pull data</em>模型天然就是支持粘性事件，它总会保存最近（最新）的值，这样订阅粘性事件总是可以拿到最近（如果有）的数据。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a><strong>使用方法</strong></h3><p>要使用上面这些高级功能，我们用AgeraBus另外一个接口方法订阅事件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AgeraBus.getDefault()</div><div class="line">              .compiler(User.class)<span class="comment">//设置订阅事件的类型</span></div><div class="line">              .priority(priority)<span class="comment">//设置优先级，或者调用.noPriority()不设置优先级(即为默认0优先级）</span></div><div class="line">              .sticky()<span class="comment">//设置为接收粘性事件，或者调用.noSticky()设置为不接收粘性事件(默认不接收粘性事件)</span></div><div class="line">              .background()<span class="comment">//设置分发线程，有background(),main(),posting(),async()对应四个分发模式(默认为posting模式)</span></div><div class="line">              .compile(updatable);<span class="comment">//设置订阅者，完成订阅</span></div></pre></td></tr></table></figure></p>
<p><strong>订阅事件不要中断链式调用，最后一定要调用compile(Updatable)完成调用</strong></p>
<p>基本用法中的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AgeraBus.getDefault()</div><div class="line">               .addUpdatable(<span class="keyword">this</span>,User.class);</div></pre></td></tr></table></figure></p>
<p>就是全部设置了默认的方式(0优先级，不接收粘性事件，posting线程分发)。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>在不同线程分发时候拿到的数据，不一定是引发这次事件的数据，拿到的数据有可能要比引发事件的数据要新，在<a href="https://github.com/captain-miao/AndroidAgeraTutorial/wiki/Reactive-programming#push-event-pull-data" target="_blank" rel="external">Agera Wiki 中文版</a>中有说到，这是因为:</p>
<blockquote>
<p>由于 <em>push event, pull data</em> 模型和多线程情况下，观察者可能看不到数据全部的更新记录。 这是特意设计的: 因为大多数情况下(尤其更新app UI), 本来就只需要关心最新的数据。</p>
</blockquote>
<p>上面的使用方法可以参考我的这个项目地址 <a href="https://github.com/EvilBT/AgeraBus" target="_blank" rel="external">AgeraBus</a>,里面有使用Demo。可以看下AgeraBus的具体实现，由于本人技术水平有限，如有Bug，欢迎讨论。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://zjutkz.net/2016/04/23/%E8%A6%81%E5%81%9A%E4%B8%80%E4%B8%AA%E6%9C%89%E5%86%92%E9%99%A9%E7%B2%BE%E7%A5%9E%E7%9A%84%E4%BA%BA%EF%BC%81%E5%BC%80%E5%90%AF%E6%BC%AB%E6%BC%AB%E7%9A%84agera%E4%B9%8B%E6%97%85/" target="_blank" rel="external">zjutkz的要做一个有冒险精神的人！开启漫漫的agera之旅</a></p>
<p><a href="https://github.com/captain-miao/AndroidAgeraTutorial/wiki" target="_blank" rel="external">Agera Wiki 中文版</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Agera </tag>
            
            <tag> EventBus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dagger2使用详解]]></title>
      <url>/2016/07/07/Dagger2%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="Dagger2-使用详解"><a href="#Dagger2-使用详解" class="headerlink" title="Dagger2 使用详解"></a>Dagger2 使用详解</h1><hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Dagger2 是一款使用在Java和Android上的依赖注入的一个类库。<br><a id="more"></a></p>
<h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><p>使用Android Studio 创建一个新的项目，在Project的 <code>build.gradle</code>文件添加以下内容：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'me.tatarka:gradle-retrolambda:3.2.4'</span></div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并在Module下的<code>build.gradle</code>添加以下内容:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.neenbedankt.android-apt'</span></div><div class="line">apply plugin: <span class="string">'me.tatarka.retrolambda'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileOptions &#123;</div><div class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    apt <span class="string">'com.google.dagger:dagger-compiler:2.4'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.google.dagger:dagger:2.4'</span></div><div class="line">    provided <span class="string">'org.glassfish:javax.annotation:10.0-b28'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就基本完全了Dagger2的配置环境（顺便也配置了支持lambda表达式）。</p>
<h2 id="Dagger2基本使用"><a href="#Dagger2基本使用" class="headerlink" title="Dagger2基本使用"></a>Dagger2基本使用</h2><p>我们先简单地创建一个类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poetry</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String mPemo;</div><div class="line"></div><div class="line">    <span class="comment">// 用Inject标记构造函数,表示用它来注入到目标对象中去</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Poetry</span><span class="params">()</span> </span>&#123;</div><div class="line">        mPemo = <span class="string">"生活就像海洋"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPemo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mPemo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们在MainActivity中使用这个类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//添加@Inject注解，表示这个mPoetry是需要注入的</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Poetry mPoetry;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTextView = (TextView) findViewById(R.id.tv_poetry);</div><div class="line">        mTextView.setText(mPoetry.getPoems());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是这样直接运行是会出错的，此时这样子在MainActivity中的<em>mPoetry</em>对象是无法被注入的，因为MainActivity不知道去哪里找到它的实例去注入生成，这时我们需要一个连接器<em>Component</em>，让上面这两个类产生联系：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用@Component表示这个接口是一个连接器，能用@Component注解的只</span></div><div class="line"><span class="comment">//能是interface或者抽象类</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 需要用到这个连接器的对象，就是这个对象里面有需要注入的属性</div><div class="line">     * （被标记为<span class="doctag">@Inject</span>的属性）</div><div class="line">     * 这里inject表示注入的意思，这个方法名可以随意更改，但建议就</div><div class="line">     * 用inject即可。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先运行一遍，AS会生成一些类，再修改一下MainActivity:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//添加@Inject注解，表示这个mPoetry是需要注入的</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Poetry mPoetry;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">// 使用Dagger2生成的类 生成组件进行构造，并注入</span></div><div class="line">        DaggerMainComponent.builder()</div><div class="line">                .build()</div><div class="line">                .inject(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTextView = (TextView) findViewById(R.id.tv_poetry);</div><div class="line">        mTextView.setText(mPoetry.getPoems());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行，如下<br><img src="http://o9qzkbu2x.bkt.clouddn.com/001.png?imageMogr2/auto-orient/thumbnail/500x" alt="运行结果"><br>上面<code>MainActivity</code>中的<code>Poetry</code>实例并不直接由MainActivity类创建，而是由<code>MainActivityComponent</code>类注入生成实例。以上就是一个简单的Dagger2示例。</p>
<h3 id="Module"><a href="#Module" class="headerlink" title="@Module"></a>@Module</h3><p>有时候我们并不能直接在构造函数里面添加<code>@Inject</code>注解，或者类中存在多个构造函数时，<code>@Inject</code>也只能注解其中一个构造函数，不能注解多个构造函数，这里是会产生<em>歧义性</em>，因为Dagger2无法确认调用哪一个构造函数来生成例的实例对象。另外一种情况是我们在项目中引用第三方类库时，也是无法直接在类构造函数中添加<code>@Inject</code>注解的，所以我们需要用到<code>@Module</code>注解了。<br><code>@Module</code>是用来生产实例来注入对象的，它类似一个工厂，集中创建要注入的类的对象实例。下面我们引用一下Gson库来看看<code>@Module</code>是怎么使用的，创建<code>MainModule</code>类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">@Module注解表示这个类提供生成一些实例用于注入</div><div class="line"> */</div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Provides</span> 注解表示这个方法是用来创建某个实例对象的，这里我们创建返回Gson对象</div><div class="line">     * 方法名随便，一般用provideXXX结构</div><div class="line">     * <span class="doctag">@return</span> 返回注入对象</div><div class="line">     */</div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">provideGson</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gson();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加完这个类后，我们要与之前写的类产生关联，不然谁知道你这里提供了生成Gson实例的方法啊。修改<code>MainCompontent</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这里表示Component会从MainModule类中拿那些用@Provides注解的方法来生成需要注入的实例</span></div><div class="line"><span class="meta">@Component</span>(modules = MainModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 需要用到这个连接器的对象，就是这个对象里面有需要注入的属性</div><div class="line">     * （被标记为<span class="doctag">@Inject</span>的属性）</div><div class="line">     * 这里inject表示注入的意思，这个方法名可以随意更改，但建议就</div><div class="line">     * 用inject即可。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里多了一个依赖，依赖<code>MainModule</code>类中的方法生成Gson实例，我们在<code>MainActivity</code>里注入Gson实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//添加@Inject注解，表示这个mPoetry是需要注入的</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Poetry mPoetry;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Gson mGson;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">// 使用Dagger2生成的类 生成组件进行构造，并注入</span></div><div class="line">        DaggerMainComponent.builder()</div><div class="line">                .build()</div><div class="line">                .inject(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTextView = (TextView) findViewById(R.id.tv_poetry);</div><div class="line">        String json = mGson.toJson(mPoetry);</div><div class="line">        mTextView.setText(json);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行，结果如下：<br><img src="http://o9qzkbu2x.bkt.clouddn.com/002.png?imageMogr2/auto-orient/thumbnail/500x" alt="运行结果"><br><code>Component</code>可以依赖多个<code>Module</code>对象，以上的构造方法与生成方法都是无参生成实例的，如果我们带参数应该怎么做了？我们创建多一个<code>PoetryModule</code>用于提供<code>Poetry</code>实例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoetryModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 这个方法需要一个String参数，在Dagger2注入中，这些参数也是注入形式的，也就是</span></div><div class="line">    <span class="comment">// 要有其他对方提供参数poems的生成，不然会造成编译出错</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Poetry <span class="title">providePoetry</span><span class="params">(String poems)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Poetry(poems);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 这里提供了一个生成String的方法，在这个Module里生成Poetry实例时，会查找到这里</span></div><div class="line">    <span class="comment">// 可以为上面提供String类型的参数</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">providePoems</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"只有意志坚强的人，才能到达彼岸"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改<code>MainComponent</code>依赖:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这里表示Component会从MainModule类中拿那些用@Provides注解的方法来生成需要注入的实例</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;MainModule.class,PoetryModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 需要用到这个连接器的对象，就是这个对象里面有需要注入的属性</div><div class="line">     * （被标记为<span class="doctag">@Inject</span>的属性）</div><div class="line">     * 这里inject表示注入的意思，这个方法名可以随意更改，但建议就</div><div class="line">     * 用inject即可。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行，就可以看到不同的诗词了：<br><img src="http://o9qzkbu2x.bkt.clouddn.com/003.png?imageMogr2/auto-orient/thumbnail/500x" alt="运行结果"><br>细心的同学就会发现了，我们提供了两个可以生成<code>Poetry</code>实例的方法，一个是在<code>Poetry</code>类的构造函数时候用<code>@Inject</code>提供的实例创建方法，一个是在<code>PoetryModule</code>中的<code>@Privodes</code>注解的<em>providePoetry</em>方法，而在上面的运行结果中我们发现是调用了<code>PoetryModule</code>提供的方法，这里就要说明一下优先级的问题，在上面这种既在构造函数中用<code>@Inject</code>提供注入来源，也在<code>@Module</code>中用<code>@Privodes</code>注解提供注入来源的，Dagger2是先从<code>@Privodes</code>查找类实例，如果找到了就用<code>@Module</code>提供的方法来创建类实例，如果没有就从构造函数里用<code>@Inject</code>注解的生成类实例，如果二者都没有，则报错，简而言之，就是<code>@Module</code>的优先级高于<code>@Inject</code>。<br>另外这里还要说明一点，在providePoetry(String)方法中，String这个参数也是要注入提供的，必须也要有在同一个连接器里面有提供，其中在构建类实例的时候，会按照以下顺序执行：</p>
<ol>
<li>从Module中查找类实例创建方法</li>
<li>Module中存在创建方法，则看此创建方法有没有参数<ol>
<li>如果有参数，这些参数也是由Component提供的，返回<strong>步骤1</strong>逐一生成参数类实例，最后再生成最终类实例</li>
<li>如果无参数，则直接由这个方法生成最终类实例</li>
</ol>
</li>
<li>Module中没有创建方法，则从构造函数里面找那个用@Inject注解的构造函数<ol>
<li>如果该构造函数有参数，则也是返回到<strong>步骤1</strong>逐一生成参数类实例，最后调用该构造函数生成类实例</li>
<li>如果该构造函数无参数，则直接调用该构造函数生成类实例</li>
</ol>
</li>
</ol>
<p>以上就是一次注入生成类实例的生成步骤。</p>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p>我们创建多一个Activity，这个Activity也注入了Poetry跟Gson对象:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//添加@Inject注解，表示这个mPoetry是需要注入的</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Poetry mPoetry;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Gson mGson;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_other);</div><div class="line"></div><div class="line">        MainComponent.getInstance()</div><div class="line">                .inject(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTextView = (TextView) findViewById(R.id.tv_poetry);</div><div class="line">        String json = mGson.toJson(mPoetry);</div><div class="line">        String text = json + <span class="string">",mPoetry:"</span>+mPoetry;</div><div class="line">        mTextView.setText(text);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们顺便也把<code>MainComponent</code>改成抽象类的形式，并添加返回<code>MainComponent</code>单例的方法,对应添加MainActivity跳转到OtherActivity的方法.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;MainModule.class,PoetryModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MainComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 需要用到这个连接器的对象，就是这个对象里面有需要注入的属性</div><div class="line">     * （被标记为<span class="doctag">@Inject</span>的属性）</div><div class="line">     * 这里inject表示注入的意思，这个方法名可以随意更改，但建议就</div><div class="line">     * 用inject即可。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(OtherActivity activity)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainComponent sComponent;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainComponent <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (sComponent == <span class="keyword">null</span>)&#123;</div><div class="line">            sComponent = DaggerMainComponent.builder().build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sComponent;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//添加@Inject注解，表示这个mPoetry是需要注入的</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Poetry mPoetry;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Gson mGson;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="comment">// 使用Dagger2生成的类 生成组件进行构造，并注入</span></div><div class="line">        MainComponent.getInstance()</div><div class="line">                .inject(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        mTextView = (TextView) findViewById(R.id.tv_poetry);</div><div class="line">        String json = mGson.toJson(mPoetry);</div><div class="line">        String text = json + <span class="string">",mPoetry:"</span>+mPoetry;</div><div class="line">        mTextView.setText(text);</div><div class="line"></div><div class="line">        findViewById(R.id.open).setOnClickListener(view -&gt;</div><div class="line">                startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,OtherActivity.class)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><img src="http://o9qzkbu2x.bkt.clouddn.com/006.png?imageMogr2/auto-orient/thumbnail/400x" alt="运行结果"><img src="http://o9qzkbu2x.bkt.clouddn.com/007.png?imageMogr2/auto-orient/thumbnail/400x" alt="运行结果"><br>可以看到，调用同一个<code>MainComponent</code>实例多次注入的时候每次都重新生成Poetry实例，有时候我们需要只希望生成一个共用实例的时候应该怎么办呢，这里我们就需要用到Dagger2的@Scope属性了，Scope是作用域的意思，我们先自定义一个@Scope注解:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PoetryScope &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同时在Module与Component加上这个自定义Scope:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PoetryScope</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;MainModule.class,PoetryModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MainComponent</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 需要用到这个连接器的对象，就是这个对象里面有需要注入的属性</div><div class="line">     * （被标记为<span class="doctag">@Inject</span>的属性）</div><div class="line">     * 这里inject表示注入的意思，这个方法名可以随意更改，但建议就</div><div class="line">     * 用inject即可。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(OtherActivity activity)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainComponent sComponent;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainComponent <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (sComponent == <span class="keyword">null</span>)&#123;</div><div class="line">            sComponent = DaggerMainComponent.builder().build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sComponent;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoetryModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 这个方法需要一个String参数，在Dagger2注入中，这些参数也是注入形式的，也就是</span></div><div class="line">    <span class="comment">// 要有其他对方提供参数poems的生成，不然会造成编译出错</span></div><div class="line">    <span class="meta">@PoetryScope</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Poetry <span class="title">providePoetry</span><span class="params">(String poems)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Poetry(poems);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 这里提供了一个生成String的方法，在这个Module里生成Poetry实例时，会查找到这里</span></div><div class="line">    <span class="comment">// 可以为上面提供String类型的参数</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">providePoems</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"只有意志坚强的人，才能到达彼岸"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新运行：<br><img src="http://o9qzkbu2x.bkt.clouddn.com/004.png?imageMogr2/auto-orient/thumbnail/400x" alt="运行结果"><img src="http://o9qzkbu2x.bkt.clouddn.com/005.png?imageMogr2/auto-orient/thumbnail/400x" alt="运行结果"><br>这时你会发现这两个Poetry实例是同一个实例来的，通过实现自定义@Scope注解，标记当前生成对象的使用范围，标识一个类型的注射器只实例化一次，在同一个作用域内，只会生成一个实例，然后在此作用域内共用一个实例。这样看起来很像单例模式，我们可以查看@Singleton其实就是@Scope的一个默认实现而已。当然，你得是同一个Component对象来生成，这点我们应该可以理解的吧。<br>我们可以通过自定义Scope来组织Component的作用域，使得每个Component的作用域清晰明了，各施其职。</p>
<h3 id="组织Component"><a href="#组织Component" class="headerlink" title="组织Component"></a>组织Component</h3><p>我们在一个项目之中不可能只使用一个Component连接器来注入对象完成注入工作，一般除了一个全局的ApplicationComponent之外，还有一些作用域在Activity/Fragment的Component，Component之间存在依赖关系与从属关系。如果我们已经创建好了一个全局的ApplicationComponent，然后其它的Component刚好需要ApplicationComponent里面的一个全局属性，想要与ApplicationComponent共享同一个实例，这时就需要用到依赖关系了。</p>
<h4 id="依赖方式"><a href="#依赖方式" class="headerlink" title="依赖方式"></a>依赖方式</h4><p>一个Component可以依赖一个或多个Component，并拿到被依赖Component暴露出来的实例，Component的<strong>dependencies</strong>属性就是确定依赖关系的实现。<br>这里的有点像数学里面的交集方式，被依赖的Component主动暴露对象给二者共享，如我们在ApplicationModule提供了一个全局的Gson对象，我们想要提供给其他Component时，要在ApplicationComponent显式的提供一个接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@Provides</span> 注解表示这个方法是用来创建某个实例对象的，这里我们创建返回Gson对象</div><div class="line">     * 方法名随便，一般用provideXXX结构</div><div class="line">     * <span class="doctag">@return</span> 返回注入对象</div><div class="line">     */</div><div class="line">    <span class="meta">@Singleton</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">provideGson</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Gson();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules = ApplicationModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Gson <span class="title">getGson</span><span class="params">()</span></span>;<span class="comment">// 暴露Gson对象接口</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并在自定义的MainApplication中初始化它，更改MainComponent:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ApplicationComponent mApplicationComponent;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainApplication sApplication;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainApplication <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sApplication;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        sApplication = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        mApplicationComponent = DaggerApplicationComponent.builder().build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ApplicationComponent <span class="title">getApplicationComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mApplicationComponent;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//这里表示Component会从MainModule类中拿那些用@Provides注解的方法来生成需要注入的实例</span></div><div class="line"><span class="meta">@PoetryScope</span></div><div class="line"><span class="meta">@Component</span>(dependencies = ApplicationComponent.class, modules = &#123;MainModule.class,PoetryModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MainComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 需要用到这个连接器的对象，就是这个对象里面有需要注入的属性</div><div class="line">     * （被标记为<span class="doctag">@Inject</span>的属性）</div><div class="line">     * 这里inject表示注入的意思，这个方法名可以随意更改，但建议就</div><div class="line">     * 用inject即可。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(OtherActivity activity)</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainComponent sComponent;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainComponent <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (sComponent == <span class="keyword">null</span>)&#123;</div><div class="line">            sComponent = DaggerMainComponent.builder()</div><div class="line">                    .applicationComponent(MainApplication.getInstance()</div><div class="line">                    .getApplicationComponent())</div><div class="line">                    .build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sComponent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就达到了MainComponent依赖ApplicationComponent。并且这里需要注意的是，MainComponent的作用域不能和ApplicationComponent的作用域一样，否则会报错，一般来讲，我们应该对每个Component都定义不同的作用域。</p>
<h4 id="包含方式（从属方式）-SubComponent"><a href="#包含方式（从属方式）-SubComponent" class="headerlink" title="包含方式（从属方式）@SubComponent"></a>包含方式（从属方式）@SubComponent</h4><p>如果我们需要父组件全部的提供对象，这时我们可以用包含方式而不是用依赖方式，相比于依赖方式，包含方式不需要父组件显式显露对象，就可以拿到父组件全部对象。且SubComponent只需要在父Component接口中声明就可以了。添加多一个AActivity,AComponent:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AScope &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@AScope</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Poetry <span class="title">getPoetry</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Poetry(<span class="string">"万物美好"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@AScope</span></div><div class="line"><span class="meta">@Subcomponent</span>(modules = AModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(AActivity activity)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="meta">@Component</span>(modules = ApplicationModule.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Gson <span class="title">getGson</span><span class="params">()</span></span>;<span class="comment">// 暴露Gson对象接口</span></div><div class="line"></div><div class="line">    <span class="comment">//AComponent plus();</span></div><div class="line">    <span class="function">AComponent <span class="title">plus</span><span class="params">(AModule <span class="keyword">module</span>)</span></span>;<span class="comment">//添加声明</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ApplicationComponent mApplicationComponent;</div><div class="line">    <span class="keyword">private</span> AComponent mAComponent;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainApplication sApplication;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainApplication <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sApplication;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        sApplication = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        mApplicationComponent = DaggerApplicationComponent.builder().build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ApplicationComponent <span class="title">getApplicationComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mApplicationComponent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> AComponent <span class="title">getAComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mAComponent == <span class="keyword">null</span>)&#123;</div><div class="line">            mAComponent = mApplicationComponent.plus(<span class="keyword">new</span> AModule());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mAComponent;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Gson mGson;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Poetry mPoetry;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_a);</div><div class="line"></div><div class="line">        MainApplication.getInstance()</div><div class="line">                .getAComponent()</div><div class="line">                .inject(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.text);</div><div class="line">        String text = mPoetry.getPoems()+<span class="string">",mPoetry:"</span>+mPoetry+(mGson == <span class="keyword">null</span> ? <span class="string">"Gson没被注入"</span> : <span class="string">"Gson已经被注入"</span>);</div><div class="line">        mTextView.setText(text);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后我们在OtherActivity中添加一个按钮跳转到AActivity，运行结果如下:<br><img src="http://o9qzkbu2x.bkt.clouddn.com/008.png?imageMogr2/auto-orient/thumbnail/500x" alt="运行结果"></p>
<h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>假如在上面的AActivity里面我们想要注入两个不同的Poetry(指peoms不一样)实例，我们可以在AModule下添加多一个生成Poetry的方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@AScope</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Poetry <span class="title">getPoetry</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Poetry(<span class="string">"万物美好"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@AScope</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Poetry <span class="title">getOtherPoetry</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Poetry(<span class="string">"我在中间"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是直接这样做Dagger2是无法区分调用哪个方法生成Poetry实例的，这个时候就需要自定义@Qualifier限定符来匹配注入方法了，添加一个自定义Qualifier并修AMoudule，AActivity:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PoetryQualifier &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AModule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@PoetryQualifier</span>(<span class="string">"A"</span>)</div><div class="line">    <span class="meta">@AScope</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Poetry <span class="title">getPoetry</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Poetry(<span class="string">"万物美好"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PoetryQualifier</span>(<span class="string">"B"</span>)</div><div class="line">    <span class="meta">@AScope</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Poetry <span class="title">getOtherPoetry</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Poetry(<span class="string">"我在中间"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    TextView mTextView;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Gson mGson;</div><div class="line"></div><div class="line">    <span class="comment">// 匹配Module中同样注解的方法</span></div><div class="line">    <span class="meta">@PoetryQualifier</span>(<span class="string">"A"</span>)</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Poetry mPoetry;</div><div class="line">    </div><div class="line">    <span class="comment">// 匹配Module中同样注解的方法</span></div><div class="line">    <span class="meta">@PoetryQualifier</span>(<span class="string">"B"</span>)</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    Poetry mPoetryB;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_a);</div><div class="line"></div><div class="line">        MainApplication.getInstance()</div><div class="line">                .getAComponent()</div><div class="line">                .inject(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mTextView = (TextView) findViewById(R.id.text);</div><div class="line">        String text = mPoetry.getPoems()+<span class="string">",mPoetryA:"</span>+mPoetry+</div><div class="line">                mPoetryB.getPoems()+<span class="string">",mPoetryB:"</span>+mPoetryB+</div><div class="line">                (mGson == <span class="keyword">null</span> ? <span class="string">"Gson没被注入"</span> : <span class="string">"Gson已经被注入"</span>);</div><div class="line">        mTextView.setText(text);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新编译运行：<br><img src="http://o9qzkbu2x.bkt.clouddn.com/009.png?imageMogr2/auto-orient/thumbnail/500x" alt="运行结果"><br>而Dagger2已经默认帮我们实现了一个@Named:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Named &#123;</div><div class="line"></div><div class="line">    <span class="comment">/** The name. */</span></div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跟我们自定义的PoetryQualifier其实是一样的。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这篇是我参考了其他文章之后自己又重新总结一遍的，错误之处请帮忙指出，大家一起进步。除了以上常用到的注解之外，Dagger还提供了其他一些注解，如Set，Map类的注解，具体可以参考以下文章。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/luxiaoming/dagger2Demo" target="_blank" rel="external">Dagger2图文完全教程</a><br><a href="http://www.jianshu.com/p/01d3c014b0b1" target="_blank" rel="external">Google官方MVP+Dagger2架构详解【从零开始搭建android框架系列（6）】</a><br><a href="http://www.jianshu.com/p/cd2c1c9f68d4" target="_blank" rel="external">Android：dagger2让你爱不释手-基础依赖注入框架篇</a><br><a href="http://www.jianshu.com/p/1d42d2e6f4a5" target="_blank" rel="external">Android：dagger2让你爱不释手-重点概念讲解、融合篇</a><br><a href="http://www.jianshu.com/p/65737ac39c44" target="_blank" rel="external">Android：dagger2让你爱不释手-终结篇</a><br><a href="http://www.jianshu.com/p/8fd84680939c" target="_blank" rel="external">Android:Dagger2学习之由浅入深</a></p>
<h3 id="Demo地址"><a href="#Demo地址" class="headerlink" title="Demo地址"></a>Demo地址</h3><p><a href="https://github.com/EvilBT/-Dagger2Demo" target="_blank" rel="external">https://github.com/EvilBT/-Dagger2Demo</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Dagger2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android开发中使用lambda表达式]]></title>
      <url>/2016/06/09/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%BF%E7%94%A8lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>在<strong>Project</strong>的<strong>build.gradle</strong>中添加：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">       <span class="keyword">classpath</span> <span class="string">'me.tatarka:gradle-retrolambda:3.2.5'</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在<strong>Module</strong>的<strong>build.gradle</strong>中添加：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'me.tatarka.retrolambda'</span></div></pre></td></tr></table></figure></p>
<p>并把jdk设置成1.8的：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileOptions &#123;</div><div class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>build</strong>更新一下,就可以在代码中使用 <strong>lambda</strong>语句了。</p>
<h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><p>最新版本的Android Studio 2.1.1本身也支持<strong>lambda</strong>语句了，SDK全部更新到最新的，然后直接在<strong>Module</strong>的<strong>build.gradle</strong>添加以下内容：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        jackOptions &#123;</div><div class="line">            enabled <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    compileOptions &#123;</div><div class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>开启<strong>jack</strong>功能，这样也可以使用<strong>lambda</strong>语句，而且这还是原生的，不过我在调试代码的时候，开启<strong>jack</strong>之后对我引入的其他<strong>Module</strong>的代码支持不是很好，调试的时候看不到其他<strong>Module</strong>引过来的类的实例的动态值，所以我还是暂时没用这个功能。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
